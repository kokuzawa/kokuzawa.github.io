<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intellij Idea on Katsumi Kokuzawa&#39;s Blog</title>
    <link>https://kokuzawa.github.io/tags/intellij-idea/</link>
    <description>Recent content in Intellij Idea on Katsumi Kokuzawa&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 28 Dec 2016 00:39:11 +0900</lastBuildDate>
    
	<atom:link href="https://kokuzawa.github.io/tags/intellij-idea/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IntelliJ IDEAでAngular2アプリを動かす</title>
      <link>https://kokuzawa.github.io/blog/2016/12/28/intellij-ideaangular2/</link>
      <pubDate>Wed, 28 Dec 2016 00:39:11 +0900</pubDate>
      
      <guid>https://kokuzawa.github.io/blog/2016/12/28/intellij-ideaangular2/</guid>
      <description>Angular2のアプリをIntelliJ IDEAで動かすまでの試行錯誤の記録です。
環境  macOS Sierra IntelliJ IDEA 2016.3  Angular2のインストール Angular2を動かすのにはNode.jsが必要なので、最初にNode.jsをインストールします。 macOSの場合、homebrewでnodebrewを入れるのが良さそうです。 nodebrewはNode.jsのバージョン管理システムだそうです。
$brew install nodebrew  nodebrewインストール直後だと、カレントのNode.jsが選択されていないため、 Node.jsのコマンドを打ってもそんなコマンドはないと怒られてしまいます。 そこで、カレントのNode.jsを選択します。 選択方法ですが、まずインストールされているNode.jsのバージョンを知る必要があるので、 下記コマンドを実行し、バージョンリストを表示します。
$nodebrew list  バージョンが表示されたら、利用したいバージョンを指定した下記コマンドを実行します。 私の環境ではv7.3.0がインストールされていたので、これをカレントにします。
$nodebrew use v7.3.0  これでNode.jsが使えるようになりました。
次に目的のAngular2をインストールするわけですが、 ここではコマンドラインツールであるangular-cliをインストールします。 インストールはnpm(Node Package Manager)を使います。
$npm install -g angular-cli  これでAngular2アプリを作る準備ができました。
Angular2アプリを作る 早速アプリを作りたいのですが、IntelliJ IDEAではAngularプロジェクトを作るメニューはありません。 プラグイン等であるのかもしれませんが、プレーンな状態ではできないので、 Angular-cliを使って雛形のプロジェクトを作成します。 プロジェクトを作りたいフォルダに移動して下記コマンドを実行します。
$ng new angular-start  これで雛形のアプリが作成されました。 angular-startフォルダに移動して下記コマンドを実行すると、http://localhost:4200/で最初の画面が表示されます。
$ng serve  IntelliJ IDEAに読み込む ここまでの作業でAngular2の動作するアプリはできましたが、 IntelliJ IDEAでの編集はまだできません。 IntelliJ IDEAで編集するために下記手順でプロジェクトを読み込みます。
 File -&amp;gt; New -&amp;gt; Project from Existing Sources&amp;hellip; を選択してangular-startフォルダを選択する Import ProjectダイアログでCreate Project from existing sourcesを選択してNextボタンをクリックする 以降は何も変更せず、Nextボタンをクリックする Finishボタンが表示されたらそれをクリックする  これでソースの読み込みは完了しました。</description>
    </item>
    
    <item>
      <title>IntelliJ IDEAからDocker上のWildFlyでデバッグする</title>
      <link>https://kokuzawa.github.io/blog/2016/02/28/intellij-ideakaradockershang-falsewildflydedebatugusuru/</link>
      <pubDate>Sun, 28 Feb 2016 01:56:31 +0900</pubDate>
      
      <guid>https://kokuzawa.github.io/blog/2016/02/28/intellij-ideakaradockershang-falsewildflydedebatugusuru/</guid>
      <description>IntelliJ IDEAからDocker上のWildFlyコンテナにアプリケーションをデプロイし、 デバッグモードで起動することでステップ実行ができる環境を作ることが今回の目的です。 Docker上にコンテナを起動できる環境はできている前提になります。
環境  OS: Mac OSX 10.11.3 Java: Java&amp;trade; SE Runtime Environment (build 1.8.0_60-b27) メモリ: 16GB Docker version 1.9.1  アプリの準備 どんなアプリでも良いのですが最終的な生成物はwarファイルにします。 今回はMavenプロジェクトで下記のようなフォルダ構成にします。
docker-wildfly-example/ ├── Dockerfile ├── container_settings.json ├── docker-wildfly-example.iml ├── pom.xml └── src └── main ├── java │ └── org │ └── katsumi │ └── HelloBean.java └── webapp ├── WEB-INF │ └── web.xml └── index.xhtml  肝心なDockerfileの内容は下記のようになります。
# WildFlyのイメージを取得 FROM jboss/wildfly:latest # MAINTAINER MAINTAINER Katsumi # アプリケーションのデプロイ COPY target/docker-wildfly-example.</description>
    </item>
    
    <item>
      <title>Edit breakpoint of the IntelliJ IDEA</title>
      <link>https://kokuzawa.github.io/blog/2013/04/01/edit-breakpoints/</link>
      <pubDate>Mon, 01 Apr 2013 22:35:00 +0900</pubDate>
      
      <guid>https://kokuzawa.github.io/blog/2013/04/01/edit-breakpoints/</guid>
      <description>IntelliJも他のIDE同様デバッグが簡単にできます。
もちろん複数のスレッドを同時にデバッグできるのですが、初期設定だと一つのスレッドが終わるまですべてのスレッドがSuspendされます。 最初はこういうものかなと思っていたんですが、設定で切り替えることができるようです。
手順 ブレークポイントをCtrl+クリックしてEditメニューを選択します。
表示されたポップアップのSuspendのところ、Allにチェックが入っていると思います。 これをThreadに変更します。もし今後すべての動作をThreadにするのであれば、右にある「Make Default」ボタンをクリックします。
これでスレッド毎にSuspendされるようになりました。
Best regards,
Katsumi</description>
    </item>
    
    <item>
      <title>IntelliJ IDEAでglassfish-web.xmlを自動生成するには</title>
      <link>https://kokuzawa.github.io/blog/2013/03/21/generate-glassfish-web-dot-xml-automatically/</link>
      <pubDate>Thu, 21 Mar 2013 00:04:00 +0900</pubDate>
      
      <guid>https://kokuzawa.github.io/blog/2013/03/21/generate-glassfish-web-dot-xml-automatically/</guid>
      <description>NetBeansだとsun-web.xmlとして自動生成されるファイルのことです。 JavaEE6のドキュメントを読む限り、 glassfish-web.xmlが正式名称のようですが&amp;hellip;。
このファイル、通常は必要ないのですが、GlassFishのBASIC認証とかDIGEST認証にJDBCレルムを使おうとすると必要になります。 XMLファイルなので、DTDのパスとか&amp;hellip;まあその辺の入力が面倒な訳で、テンプレートは検索すれば見つかりますけど、出来ればIntelliJで生成できないかなと。
手順 画面上部のツールバーからProject Structureを選択。もしくはCmd+;
表示された画面からModules-&amp;gt;Webと選択し、右ペイン中にあるAdd Aplication Server specific descriptorボタンをクリック。
表示されたポップアップのApplication ServerをGlassfish Serverに、Descriptorは選択肢が2つで最後にOracleとなっている方を選択。 (以下のイメージでは既にOracleを設定済みなのでSunしか表示されていない。)
これでglassfish-web.xmlのテンプレートが自動生成される。
glassfish-web.xml:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE glassfish-web-app PUBLIC &amp;quot;-//GlassFish.org//DTD GlassFish Application Server 3.1 Servlet 3.0//EN&amp;quot; &amp;quot;http://glassfish.org/dtds/glassfish-web-app_3_0-1.dtd&amp;quot;&amp;gt; &amp;lt;glassfish-web-app&amp;gt; &amp;lt;/glassfish-web-app&amp;gt;  あとはここに必要な記述を追加して行くだけ。IntelliJは補完が強力なので、ここまでファイルが出来てくれれば後は楽。</description>
    </item>
    
  </channel>
</rss>