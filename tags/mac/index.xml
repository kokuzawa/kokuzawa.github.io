<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mac on KATSUMI KOKUZAWA&#39;S BLOG</title>
    <link>https://kokuzawa.github.io/tags/mac/</link>
    <description>Recent content in Mac on KATSUMI KOKUZAWA&#39;S BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 01 Feb 2015 13:20:12 +0900</lastBuildDate>
    
        <atom:link href="https://kokuzawa.github.io/tags/mac/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OSXのアイコンキャッシュに悩む</title>
      <link>https://kokuzawa.github.io/blog/2015/02/01/osxfalseaikonkiyatusiyuninao-mu/</link>
      <pubDate>Sun, 01 Feb 2015 13:20:12 +0900</pubDate>
      
      <guid>https://kokuzawa.github.io/blog/2015/02/01/osxfalseaikonkiyatusiyuninao-mu/</guid>
      <description>

&lt;p&gt;自宅でのOfficeソフトですが、普段はApache OpenOfficeを使っています。
久しぶりに起動したら最新版へのダウンロードアイコンが表示されていたので、
アップデートをしようとOpenOfficeのサイトを開きました。
すると、それはなんかこう残念なデザインのサイトのままで、
じゃあLibreOfficeの方はどうなんだろうと覗いてみると、
すっきりした個人的に好みなサイトデザインでした。
ソフトウェアの品質には関係がないとわかっていたのですが、
それでもLibreOfficeの方が良さそうだなと思わせてもらうには十分だったので、
これを機会にApache OpenOfficeからLibreOfficeに置き換えることにしました。&lt;/p&gt;

&lt;!-- MORE --&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;まず、インストールされているApache OpenOfficeをゴミ箱へ捨てます。
そのあと、ダウンロードしておいたLibreOfficeのdmgを起動して、
アプリをApplicationフォルダにコピーします。
これでインストールが完了しました。&lt;/p&gt;

&lt;h2 id=&#34;使ってみる&#34;&gt;使ってみる&lt;/h2&gt;

&lt;p&gt;早速スプレットシートを起動してファイルを作成して保存すると、
なぜかファイルのアイコンがOpenOfficeのままになっています。
「情報を見る」で確認すると、アイコンはOpenOfficeなんですが、
プレビューの部分はLibreOfficeになっています。
この時点で、キャッシュが悪さしているのだろうとは思ったのですが、
どうやって直したものかかなり悩みました。&lt;/p&gt;

&lt;h2 id=&#34;キャッシュはどこだ&#34;&gt;キャッシュはどこだ？&lt;/h2&gt;

&lt;p&gt;調べると、OSXのキャッシュ情報は下記の3箇所にあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/System/Library/Caches&lt;/li&gt;
&lt;li&gt;/Library/Caches&lt;/li&gt;
&lt;li&gt;/Users/UserName/Library/Caches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この中のファイルをすべて削除すれば良さそうですが、
Cachesフォルダの中にIntellij14とかいうフォルダもあって、
何も考えずに削除すると大変なことになりそうな気がします。&lt;/p&gt;

&lt;p&gt;そこでファイルの名前からそれっぽいのを探してピンポイントで削除できないだろうかと、
3箇所の中を眺めていると/Library/Cachesに&lt;code&gt;com.apple.iconservices.store&lt;/code&gt;というそれっぽいフォルダを見つけました。
このフォルダをひとまずリネームしてOSを再起動すると、
スプレットシートのファイルのアイコンが無事にLibreOfficeのものに変わっていました。&lt;/p&gt;

&lt;p&gt;改めて/Library/Cachesを除くと、&lt;code&gt;com.apple.iconservices.store&lt;/code&gt;フォルダが新しく作られているので、
リネームした古いフォルダを削除します。これで完了です。&lt;/p&gt;

&lt;p&gt;一応おきまりの注意ですが、
たまたま上手く行っただけかもしれないので、
あくまでも自己責任でお願いします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WiiRemoteJで遊ぼう on OSX 10.8.7</title>
      <link>https://kokuzawa.github.io/blog/2012/12/11/wiiremotejdeyou-bou-on-osx-10-dot-8-7/</link>
      <pubDate>Tue, 11 Dec 2012 01:46:00 +0900</pubDate>
      
      <guid>https://kokuzawa.github.io/blog/2012/12/11/wiiremotejdeyou-bou-on-osx-10-dot-8-7/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://atnd.org/events/33871&#34;&gt;Java Advent Calendar 2012&lt;/a&gt;の11日目のエントリーです。&lt;br /&gt;
昨日は&lt;a href=&#34;https://twitter.com/cero_t&#34;&gt;@cero_t&lt;/a&gt;さんです。&lt;br /&gt;
明日は&lt;a href=&#34;https://twitter.com/snuffkin&#34;&gt;@snuffkin&lt;/a&gt;さんです。&lt;/p&gt;

&lt;h2 id=&#34;クリスマスだから楽しいことをしよう&#34;&gt;クリスマスだから楽しいことをしよう&lt;/h2&gt;

&lt;p&gt;ということで、WiiUも発売したことだし、今更ながら、WiiRemoteJを取り上げてみたいと思います。
WiiRemoteJはBluetoothを利用して、WiiリモコンでJavaのアプリを操作するためのライブラリです。
最新版はv1.6というのがあるようなのですが、見つけることができなかったため、v1.4を使ってみたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;osx-10-8-7-mountain-lionで動かす&#34;&gt;OSX 10.8.7 Mountain Lionで動かす&lt;/h2&gt;

&lt;p&gt;今回やりたいことは、Macbook Pro上にWiiリモコンのレシーバーとなるアプリを起動し、
Wiiリモコンを使ってそのアプリを操作する、ということです。
レシーバーアプリは下記2つのライブラリが必要になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/bluecove/&#34;&gt;BlueCove.jar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dl.qj.net/wii/homebrew/wiiremotej-v14.html&#34;&gt;WiiRemoteJ.jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BlueCoveはJavaのBluetoothを利用する為のAPIの規約であるJSR-82の実装ライブラリです。
WiiRemoteJを動かす為に必要になります。
BlueCoveの最新版は2.1.0です。ところがこのBlueCove-2.1.0、Mountain Lion上では動かす事ができません。
Mountain Lionで動かす為には、まだ正式にリリースされていないBlueCove-2.1.1-SNAPSHOTを利用する必要があります。&lt;/p&gt;

&lt;p&gt;ただ、この2.1.1-SNAPSHOTも問題があります。
BlueCoveはBluetoothにアクセスする為に/System/Library/Frameworks/IOBluetooth.frameworkというフレームワークを利用しているのですが、
BlueCove-2.1.1-SNAPSHOTはこのIOBluetooth.frameworkに対応できていないため、実行時にエラーが発生してしまいます。&lt;/p&gt;

&lt;p&gt;という訳で、このままでは実行できそうにありません。
そこで、&lt;a href=&#34;https://groups.google.com/forum/#!msg/bluecove-users/7jWv1V1GC-4/jCHnASj1pbMJ&#34;&gt;ここ&lt;/a&gt;で提供されている、
BlueCove-2.1.1-SNAPSHOTで操作できるIOBluetooth.frameworkに置き換えることにします。
置き換える事により、他のアプリで問題が発生するかもしれません。
置き換える前に、元のIOBluetooth.frameworkのバックアップを作る事をお勧めします。&lt;/p&gt;

&lt;p&gt;さあ、ここまでできれば、あとはレシーバーを作るだけです。&lt;/p&gt;

&lt;h2 id=&#34;レシーバーを実装する&#34;&gt;レシーバーを実装する&lt;/h2&gt;

&lt;p&gt;下記が実装コードになります。動作は単純で、1ボタン、2ボタン、マイナスボタン、プラスボタン、Aボタン、Bボタン、十字キーを押した場合は、
それを標準出力に表示、ホームボタンを押したらレシーバーを終了します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import wiiremotej.WiiRemote;
import wiiremotej.WiiRemoteJ;
import wiiremotej.event.WRAccelerationEvent;
import wiiremotej.event.WRButtonEvent;
import wiiremotej.event.WRStatusEvent;
import wiiremotej.event.WiiRemoteAdapter;
import wiiremotej.event.WiiRemoteDiscoveredEvent;
import wiiremotej.event.WiiRemoteDiscoveryListener;

/**
 * WiiRemoteJサンプルアプリ
 * @author Katsumi
 */
public class Wii extends WiiRemoteAdapter implements WiiRemoteDiscoveryListener
{
    private WiiRemote _remote;

    public static void main(String... args)
    {
        Wii wii = new Wii();
        WiiRemoteJ.findRemotes(wii, 1);
    }

    @Override
    public void wiiRemoteDiscovered(WiiRemoteDiscoveredEvent evt)
    {
        _remote = evt.getWiiRemote();
        try {
            _remote.setAccelerometerEnabled(true);
            _remote.setSpeakerEnabled(true);
            _remote.setLEDIlluminated(0, true);
        }
        catch (IOException | IllegalStateException ex) {
            Logger.getLogger(Wii.class.getName()).log(Level.SEVERE, null, ex);
            if (null != _remote &amp;amp;&amp;amp; _remote.isConnected()) {
                _remote.disconnect();
            }
        }

        _remote.addWiiRemoteListener(this);
    }

    @Override
    public void disconnected()
    {
    }

    @Override
    public void findFinished(int numFound)
    {
    }

    @Override
    public void statusReported(WRStatusEvent evt)
    {
    }

    @Override
    public void accelerationInputReceived(WRAccelerationEvent evt)
    {
    }

    @Override
    public void buttonInputReceived(WRButtonEvent evt)
    {
        if (evt.wasPressed(WRButtonEvent.TWO)) {
            System.out.println(&amp;quot;2&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.ONE)) {
            System.out.println(&amp;quot;1&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.B)) {
            System.out.println(&amp;quot;B&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.A)) {
            System.out.println(&amp;quot;A&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.MINUS)) {
            System.out.println(&amp;quot;Minus&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.PLUS)) {
            System.out.println(&amp;quot;Plus&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.LEFT)) {
            System.out.println(&amp;quot;Left&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.RIGHT)) {
            System.out.println(&amp;quot;Right&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.DOWN)) {
            System.out.println(&amp;quot;Down&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.UP)) {
            System.out.println(&amp;quot;Up&amp;quot;);
        }
        else if (evt.wasPressed(WRButtonEvent.HOME)) {
            if (null != _remote &amp;amp;&amp;amp; _remote.isConnected()) {
                _remote.disconnect();
            }
            System.exit(0);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;動かしてみる&#34;&gt;動かしてみる&lt;/h2&gt;

&lt;p&gt;レシーバー起動時のVMオプションに下記を設定します。
このオプションを設定しないと、実行時にエラーが発生します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-Dbluecove.jsr82.psm_minimum_off=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レシーバー起動後にWiiリモコンの電池脇にある赤いSyncボタンを押す必要があります。数秒待つとアプリとWiiリモコンが繋がります。&lt;/p&gt;

&lt;p&gt;実際に動かしているときの動画です。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/DzjeZHDwMFI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;本当はボタンを押したらWiiリモコンで音を鳴らすということもしてみたかったのですが、
エラーが出て音源ファイルがWiiリモコンにうまく転送されませんでした。
仕組みとしては、アプリ側からのアクションでWiiリモコン側で音を鳴らす事もできるはずです。
音が出せるようになれば、ちょっとしたパーティーゲームができそうなので、この時期にはもってこいの遊びではないでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>はじめてのLATEX</title>
      <link>https://kokuzawa.github.io/blog/2012/11/24/hazimetefalselatex/</link>
      <pubDate>Sat, 24 Nov 2012 01:25:00 +0900</pubDate>
      
      <guid>https://kokuzawa.github.io/blog/2012/11/24/hazimetefalselatex/</guid>
      <description>

&lt;p&gt;LaTeXって良く目にするんだけれども、それが何なのか、文書作成用の何か程度の知識しかなかった。
何がきっかけだったのかすっかり忘れてしまったけど、今日LaTeXを使ってみようと思い立ち、利用するための環境設定を色々と調べたので、その記録を書き記しておこうと思う。&lt;/p&gt;

&lt;h2 id=&#34;latexって何&#34;&gt;LaTeXって何？&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;LATEX（ラテック、ラテフ、レイテック、レイテックス）とは、レスリー・ランポート (英: Leslie Lamport) によって開発されたテキストベースの組版処理システムである。電子組版ソフトウェア TEX にマクロパッケージを組み込むことによって構築されており、単体の TEX に比べて、より手軽に組版を行うことができるようになっている。なお、LATEX を基にアスキーが日本語処理に対応させたものとして日本語 LATEX が、さらに縦組み処理にも対応させたものとして pLATEX がある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/LaTeX&#34;&gt;Wikipedia&lt;/a&gt;によれば、組版処理システムということらしい。Wordとかの所謂文書スタイルを制御するものと考えれば良さそう。
ただ、これだけではLaTeXが一体なんなのかがぼんやりとしか分からない。
やっぱり実際に触ってみた方が良さそうだ。&lt;/p&gt;

&lt;h2 id=&#34;macにlatexをインストールする&#34;&gt;MacにLaTeXをインストールする&lt;/h2&gt;

&lt;p&gt;MacでLaTexを使うには何をインストールしたら良いのか？
調べたところ、pTeXというのを入れれば良く、これは縦組み処理も対応したpLATEXと同じもの。
早速インストールしてみよう。インストーラを見つけるよりは、MacPortsを利用した方が早いんじゃないのかと思い、MacPortsで検索してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; sudo port search ptex

pTeX @20110314 (tex, print, textproc, japanese)
    Japanese TeX (pTeX) processing environment

ptex-sfmacros @0 (tex, print, japanese)
    Tategumi/Tateyoko/Kunten packages written by Shinsaku Fujita.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2つ見つけたけど、1つ目の方だろう。インストールする場合はオプションをつけた方が良いとのこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; sodo port install pTeX +utf8 +motif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;長い&amp;hellip;。とても時間がかかるので最初にコーヒーを淹れておけばよかった。ゆっくり飲みながら気長に待つ。
インストールが終わったら、ちゃんとインストールがされたか確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; platex -version

TeX 3.141592-p3.1.10 (utf8.euc) (Web2C 7.5.4)
kpathsea version 3.5.6
ptexenc version 0.997
Copyright (C) 1997-2004 D.E. Knuth.
Kpathsea is copyright (C) 1997-2004 Free Software Foundation, Inc.
There is NO warranty.  Redistribution of this software is
covered by the terms of both the pTeX copyright and
the GNU General Public License.
For more information about these matters, see the files
named COPYING and the pTeX source.
Primary author of TeX: D.E. Knuth.
Kpathsea written by Karl Berry and others.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ああ、やっとインストールできた。&lt;/p&gt;

&lt;h2 id=&#34;使ってみよう&#34;&gt;使ってみよう&lt;/h2&gt;

&lt;p&gt;LaTeXを使うには、まず素となるテキストを作る必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\documentclass[a4paper,12pt]{jarticle}
\begin{document}
本文です。
\end{document}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;firstdoc.texという名前で保存。tex拡張子はおそらく慣習？
これをplatexでコンパイルする。コンパイルという言葉が正しいかどうかは分からないけど。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; platex firstdoc.tex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、拡張子がDVIの中間ファイルが生成される。
このファイルはプレビューすることができて、どんな組版になったのかを確認できるようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; xdvi firstdoc.dvi

Error: Can&#39;t open display:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーが出た。Macの場合、ターミナルでプレビューを見ようとしてもダメらしく、
プレビューを見るにはX11をインストールする必要があるらしい。
今更X11はインストールしたくないので、別の方法で確認してみようと思う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dvipdf firstdoc.dvi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは、PDFファイルを生成するためのコマンド。実行するとPDFファイルが生成されるので、それを開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; open firstdoc.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでプレビューアプリでfirstdoc.pdfを開くことができる。
PDFは開いたままファイルを修正して、platex -&amp;gt; dvipdf でもう一回PDFを生成すると、
開いているPDFが更新される。これで組版の確認をすることができるようになった。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;たいした内容を書かなくても、それっぽいドキュメントを作ることができるのはありがたい。
あと、文章を作る行程がプログラミングのようで、これもなかなか楽しいし、
素となるファイルがバイナリではないので、版数管理もし易そうだ。
組版をするにはいろいろと覚えることが多そうだけど、それを差し引いてもすばらしい。&lt;/p&gt;

&lt;h2 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://keizai.xrea.jp/latex/tutorial/index.html&#34;&gt;http://keizai.xrea.jp/latex/tutorial/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

